/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "Layers_proxy.h"
#import "LicenseUtils_proxy.h"
#import "MapBounds_proxy.h"
#import "MapPos_proxy.h"
#import "MapVec_proxy.h"
#import "Options_proxy.h"

/**
 * A platform independent main view class for all mapping operations.<br>
 * Allows the user to manipulate the map and access various related components.
 */
@interface NTBaseMapView : NSObject
{
	void *swigCPtr;
	BOOL swigCMemOwn;
}
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * Registers the SDK license. This class method and must be called before<br>
 * creating any actual MapView instances.<br>
 * @param licenseKey The license string provided for this application.<br>
 * @param platformType The platform type.<br>
 * @param appIdentifier The application bundle identifier for iOS or the package name for Android.<br>
 * @return True if license is valid, false if not.
 */
+(BOOL)RegisterLicense: (NSString*)licenseKey platformType: (enum NTPlatformType)platformType appIdentifier: (NSString*)appIdentifier;
-(id)init;
/**
 * Prepares renderers for drawing. Has to be called again if the graphics context was lost.
 */
-(void)onSurfaceCreated;
/**
 * Changes the screen size of the map view. Calling this method before<br>
 * onSurfaceCreated is called results in undefined behaviour.<br>
 * @param width The new width of the map view.<br>
 * @param height The new height of the map view.
 */
-(void)onSurfaceChanged: (int)width height: (int)height;
/**
 * Draws a single frame to the current graphics context. Calling this method before<br>
 * onSurfaceCreated and onSurfaceChanged are called results in undefined behaviour.
 */
-(void)onDrawFrame;
/**
 * Handles a user input event.<br>
 * @param event The event type. First pointer down = 0, second pointer down = 1, either pointer moved = 2, <br>
 * gesture canceled = 3, first pointer up = 4, second pointer up = 5.<br>
 * <br>
 * <br>
 * <br>
 * 
 */
-(void)onInputEvent: (int)event x1: (float)x1 y1: (float)y1 x2: (float)x2 y2: (float)y2;
/**
 * Returns the Layers object, that can be used for adding and removing map layers.<br>
 * @return The Layer object.
 */
-(NTLayers*)getLayers;
/**
 * Returns the Options object, that can be used for modifying various map options.<br>
 * @return the Option object.
 */
-(NTOptions*)getOptions;
/**
 * Returns the position that the camera is currently looking at.<br>
 * @return The current focus position in the coordinate system of the base projection.
 */
-(NTMapPos*)getFocusPos;
/**
 * Returns the map rotation in degrees. 0 means looking north, 90 means west, -90 means east and 180 means south.<br>
 * @return The map rotation in degrees in range of (-180 .. 180].
 */
-(float)getRotation;
/**
 * Returns the tilt angle in degrees. 0 means looking directly at the horizon, 90 means looking directly down.<br>
 * @return The tilt angle in degrees.
 */
-(float)getTilt;
/**
 * Returns the zoom level. The value returned is never negative, 0 means absolutely zoomed out and all other<br>
 * values describe some level of zoom.<br>
 * @return The zoom level.
 */
-(float)getZoom;
/**
 * Pans the view relative to the current focus position. The deltaPos vector is expected to be in <br>
 * the coordinate system of the base projection. The new calculated focus position will be clamped to<br>
 * the world bounds and to the bounds set by Options::setPanBounds.<br>
 * <br>
 * If durationSeconds &gt; 0 the panning operation will be animated over time. If the previous panning animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * <br>
 * @param durationSeconds The duration in which the tilting operation will be completed in seconds.
 */
-(void)pan: (NTMapVec*)deltaPos durationSeconds: (float)durationSeconds;
/**
 * Sets the new absolute focus position. The new focus position is expected to be in<br>
 * the coordinate system of the base projection. The new focus position will be clamped to<br>
 * the world bounds and to the bounds set by Options::setPanBounds.<br>
 * <br>
 * If durationSeconds &gt; 0 the panning operation will be animated over time. If the previous panning animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * <br>
 * @param durationSeconds The duration in which the tilting operation will be completed in seconds.
 */
-(void)setFocusPos: (NTMapPos*)pos durationSeconds: (float)durationSeconds;
/**
 * Rotates the view relative to the current rotation value. Positive values rotate clockwise, negative values counterclockwise.<br>
 * The new calculated rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable <br>
 * is set to false.<br>
 * <br>
 * If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * <br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
-(void)rotate: (float)deltaAngle durationSeconds: (float)durationSeconds;
/**
 * Rotates the view relative to the current rotation value. Positive values rotate clockwise, negative values counterclockwise.<br>
 * The new calculated rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable<br>
 * is set to false.<br>
 * <br>
 * Rotating is done around the specified target position, keeping it at the same location on the screen.<br>
 * <br>
 * If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * <br>
 * @param targetPos The zooming target position in the coordinate system of the base projection.<br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
-(void)rotate: (float)deltaAngle targetPos: (NTMapPos*)targetPos durationSeconds: (float)durationSeconds;
/**
 * Sets the new absolute rotation value. 0 means look north, 90 means west, -90 means east and 180 means south.<br>
 * The rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable<br>
 * is set to false.<br>
 * <br>
 * If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * <br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
-(void)setRotation: (float)angle durationSeconds: (float)durationSeconds;
/**
 * Sets the new absolute rotation value. 0 means look north, 90 means west, -90 means east and 180 means south.<br>
 * The rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable <br>
 * is set to false.<br>
 * <br>
 * Rotating is done around the specified target position, keeping it at the same location on the screen.<br>
 * <br>
 * If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * <br>
 * @param targetPos The zooming target position in the coordinate system of the base projection.<br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
-(void)setRotation: (float)angle targetPos: (NTMapPos*)targetPos durationSeconds: (float)durationSeconds;
/**
 * Tilts the view relative to the current tilt value. Positive values tilt the view down towards the map, <br>
 * negative values tilt the view up towards the horizon. The new calculated tilt value will be clamped to<br>
 * the range of [30 .. 90] and to the range set by Options::setZoomRange.<br>
 * <br>
 * If durationSeconds &gt; 0 the tilting operation will be animated over time. If the previous tilting animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param deltaTilt The number of degrees the camera should be tilted by.<br>
 * @param durationSeconds The duration in which the tilting operation will be completed in seconds.
 */
-(void)tilt: (float)deltaTilt durationSeconds: (float)durationSeconds;
/**
 * Sets the new absolute tilt value. 0 means look directly at the horizon, 90 means look directly down. The<br>
 * minimum tilt angle is 30 degrees and the maximum is 90 degrees. The tilt value can be further constrained<br>
 * by the Options::setTiltRange method. Values exceeding these ranges will be clamped.<br>
 * <br>
 * If durationSeconds &gt; 0 the tilting operation will be animated over time. If the previous tilting animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param tilt The new absolute tilt value in degrees.<br>
 * @param durationSeconds The duration in which the tilting operation will be completed in seconds.
 */
-(void)setTilt: (float)tilt durationSeconds: (float)durationSeconds;
/**
 * Zooms the view relative to the current zoom value. Positive values zoom in, negative values zoom out.<br>
 * The new calculated zoom value will be clamped to the range of [0 .. 24] and to the range set by Options::setZoomRange.<br>
 * <br>
 * If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param deltaZoom The delta zoom value.<br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
-(void)zoom: (float)deltaZoom durationSeconds: (float)durationSeconds;
/**
 * Zooms the view relative to the current zoom value. Positive values zoom in, negative values zoom out.<br>
 * The new calculated zoom value will be clamped to the range of [0 .. 24] and to the range set by Options::setZoomRange.<br>
 * <br>
 * Zooming is done towards the specified target position, keeping it at the same location on the screen.<br>
 * <br>
 * If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param deltaZoom The delta zoom value.<br>
 * @param targetPos The zooming target position in the coordinate system of the base projection.<br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
-(void)zoom: (float)deltaZoom targetPos: (NTMapPos*)targetPos durationSeconds: (float)durationSeconds;
/**
 * Sets the new absolute zoom value. The minimum zoom value is 0, which means absolutely zoomed out and the maximum<br>
 * zoom value is 24. The zoom value can be further constrained by the Options::setZoomRange method. Values<br>
 * exceeding these ranges will be clamped. <br>
 * <br>
 * If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param zoom The new absolute zoom value.<br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
-(void)setZoom: (float)zoom durationSeconds: (float)durationSeconds;
/**
 * Sets the new absolute zoom value. The minimum zoom value is 0, which means absolutely zoomed out and the maximum <br>
 * zoom value is 24. The zoom value can be further constrained by the Options::setZoomRange method. Values <br>
 * exceeding these ranges will be clamped.<br>
 * <br>
 * Zooming is done towards the specified target position, keeping it at the same location on the screen.<br>
 * <br>
 * If durationSeconds &gt; 0, the zooming operation will be animated over time. If the previous zooming animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param zoom The new absolute zoom value.<br>
 * @param targetPos The zooming target position in the coordinate system of the base projection.<br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
-(void)setZoom: (float)zoom targetPos: (NTMapPos*)targetPos durationSeconds: (float)durationSeconds;
/**
 * Animate the view parameters (focus position, tilt, rotation, zoom) so that the specified bounding box becomes fully visible.<br>
 * This method does not work before the screen size is set.<br>
 * @param bounds The bounding box to be made visible in the base projection's coordinate system.<br>
 * @param screenPadding The amount of padding to add to the edges of the screen in screen density independent pixels (dp).<br>
 * @param integerZoom If true, then closest integer zoom level will be used. If false, exact fractional zoom level will be used.<br>
 * @param durationSeconds The duration in which the operation will be completed in seconds.
 */
-(void)moveToFitBounds: (NTMapBounds*)bounds screenPadding: (float)screenPadding integerZoom: (BOOL)integerZoom durationSeconds: (float)durationSeconds;
/**
 * Animate the view parameters (focus position, tilt, rotation, zoom) so that the specified bounding box becomes fully visible.<br>
 * Also supports resetting the tilt and rotation angles over the course of the animation.<br>
 * This method does not work before the screen size is set.<br>
 * @param bounds The bounding box to be made visible in the base projection's coordinate system.<br>
 * @param screenPadding The amount of padding to add to the edges of the screen in screen density independent pixels (dp). <br>
 * @param integerZoom If true, then closest integer zoom level will be used. If false, exact fractional zoom level will be used.<br>
 * @param resetTilt If true, view will be untilted. If false, current tilt will be kept.<br>
 * @param resetRotation If true, rotation will be reset. If false, current rotation will be kept.<br>
 * @param durationSeconds The duration in which the operation will be completed in seconds.
 */
-(void)moveToFitBounds: (NTMapBounds*)bounds screenPadding: (float)screenPadding integerZoom: (BOOL)integerZoom resetRotation: (BOOL)resetRotation resetTilt: (BOOL)resetTilt durationSeconds: (float)durationSeconds;
/**
 * Calculates the world map position corresponding to a screen position, using the current view parameters.<br>
 * @param screenPos The screen position.<br>
 * @return The calculated world map position.
 */
-(NTMapPos*)screenToWorld: (NTMapPos*)screenPos;
/**
 * Calculates the screen position corresponding to a world map position, using the current view parameters.<br>
 * @param worldPos The world map position.<br>
 * @return The calculated screen position.
 */
-(NTMapPos*)worldToScreen: (NTMapPos*)worldPos;
/**
 * Cancels all qued tasks such as tile and vector data fetches. Tasks that have already started<br>
 * may continue until they finish. Tasks that are added after this method call are not affected.
 */
-(void)cancelAllTasks;
/**
 * Releases the memory occupied by the preloading area. Calling this method releases some<br>
 * memory if preloading is enabled, but means that the area right outside the visible area has to be<br>
 * fetched again.
 */
-(void)clearPreloadingCaches;
/**
 * Releases memory occupied by all caches. Calling this means that everything has to be fetched again,<br>
 * including the visible area.
 */
-(void)clearAllCaches;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

